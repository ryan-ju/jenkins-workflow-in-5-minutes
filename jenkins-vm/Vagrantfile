# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "ubuntu/trusty64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network "private_network", ip: "192.168.2.4"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
    vb.memory = "2048"
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   sudo apt-get update
  #   sudo apt-get install -y apache2
  # SHELL

  config.vm.provision "shell", inline: <<-SHELL
    JDK_HOME=/usr/local/jdk
    MAVEN_HOME=/usr/local/maven

    echo "==== Create /var/log/vagrant ===="
    mkdir -p /var/log/vagrant

    # Install JDK8.
    # !!! You MUST ensure the relevant ./tmp/jdk<version>.tar.gz file exists. !!!
    echo "==== Installing JDK8 ... ===="
    mkdir -p $JDK_HOME
    tar -zxf /vagrant/tmp/jdk*.gz -C $JDK_HOME --strip-components 1
    # Also sets keytool to point to the one in JDK.
    update-alternatives --install "/usr/bin/java" "java" "$JDK_HOME/bin/java" 2000 --slave "/usr/bin/javac" "javac" "$JDK_HOME/bin/javac" --slave "/usr/bin/keytool" "keytool" "$JDK_HOME/bin/keytool"
    # Add JAVA_HOME to environment variables
    echo "JAVA_HOME=$JDK_HOME" >> /etc/environment
    echo "==== Installed JDK8! ===="

    echo "==== Installing git ... ===="
    apt-get update
    apt-get -y install git
    echo "==== Installed git! ===="

    echo "==== Installing maven ... ===="
    curl -L -o /tmp/maven.tar.gz http://mirrors.ukfast.co.uk/sites/ftp.apache.org/maven/maven-3/3.3.9/binaries/apache-maven-3.3.9-bin.tar.gz
    mkdir -p $MAVEN_HOME
    tar -zxf /tmp/maven.tar.gz -C $MAVEN_HOME --strip-components 1
    update-alternatives --install "/usr/bin/mvn" "mvn" "$MAVEN_HOME/bin/mvn" 1
    echo "M2_HOME=$MAVEN_HOME" >> /etc/environment
    rm /tmp/maven.tar.gz
    echo "==== Installed maven! ===="

    echo "==== Installing Jenkins ... ===="
    wget -q -O - https://jenkins-ci.org/debian/jenkins-ci.org.key | apt-key add -
    sh -c 'echo deb http://pkg.jenkins-ci.org/debian binary/ > /etc/apt/sources.list.d/jenkins.list'
    apt-get update
    apt-get -y install jenkins
    echo "==== Installed Jenkins! ===="

    echo "==== Installing Jenkins plugins ... ===="
    # Download mass installation script
    curl -L https://raw.githubusercontent.com/hgomez/devops-incubator/master/forge-tricks/batch-install-jenkins-plugins.sh -o batch-install-jenkins-plugins.sh
    chmod u+x batch-install-jenkins-plugins.sh
    ./batch-install-jenkins-plugins.sh --plugins /vagrant/jenkins-plugins --plugindir /var/lib/jenkins/plugins
    # Restart Jenkins
    service jenkins restart
    echo "==== Installed Jenkins plugins! ===="

    echo "==== Configure Jenkins ... ===="
    cp /vagrant/config/hudson.tasks.Maven.xml /var/lib/jenkins/
    chown jenkins:jenkins /var/lib/jenkins/hudson.tasks.Maven.xml
    mkdir -p /var/lib/jenkins/.m2
    cp /vagrant/config/settings.xml /var/lib/jenkins/.m2/
    chown -R jenkins:jenkins /var/lib/jenkins/.m2
    echo "==== Configured Jenkins! ===="

    # gpg key is used to sign maven artifacts
    # !!! Make sure you have a key file named secret.key in ./tmp/ !!!
    echo "==== Import gpg secret key ... ===="
    gpg --allow-secret-key-import --import /vagrant/tmp/secret.key
    echo "==== Imported gpg secret key! ===="

    echo "==== Import jobs ... ===="
    mkdir -p /var/lib/jenkins/jobs/workflow-demo-01
    cp /vagrant/jobs/workflow-demo-01/config.xml /var/lib/jenkins/jobs/workflow-demo-01/
    chown -R jenkins:jenkins /var/lib/jenkins/jobs
    echo "==== Imported jobs! ===="
  SHELL

end
